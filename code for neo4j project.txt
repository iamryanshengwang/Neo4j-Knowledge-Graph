import pandas as pd
import re
def read_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return file.readlines()
newrules = read_file('newrules.txt')
components = read_file('component.txt')
rules = read_file('rules.txt') 
type_and_etc = [line.split('\t') for line in read_file('type and etc.txt')]
sections = []
buffer = []
with open('OD rules.txt', 'r', encoding='utf-8') as file:
    for line in file:
        stripped_line = line.strip()
        if stripped_line == '':
            if buffer:
                sections.append(' '.join(buffer))
                buffer = []
        else:
            buffer.append(stripped_line)
    if buffer:
        sections.append(' '.join(buffer))
pattern = r'([✔✘])\s*(.*)'
data = []
section_id = 1
for section in sections:
    items = re.split(r'\s*\|\|\s*|\s*&&\s*|\s*\(\s*|\s*\)\s*', section)
    section_data = []
    for item in items:
        match = re.match(pattern, item) 
        if match:
            status, name = match.groups()
            section_data.append((section_id, status, name))
    if section_data:
        data.extend(section_data)
    section_id += 1
df = pd.DataFrame(data, columns=['Section_id', 'Status', 'name'])
df['name'] = df['name'].str.replace(r'\bOnly\b.*', '', regex=True).str.strip()
df['name'] = df['name'].str.replace(r'\bSBB\w*\b', '', regex=True).str.strip()
print(df) 

import sqlite3 
from py2neo import Graph, Node, Relationship
g = Graph('neo4j://localhost:7687', auth = ('neo4j', 'ys1203303'))
g.run("MATCH (n) DETACH DELETE n") 
for i in range(999):
    node1 = Node(
            "parent",
            Name = newrules[i],
            Component = components[i],
            originalRule = rules[i],
            Type = "Derive",
            ProjectName = type_and_etc[i][0],
            Version = type_and_etc[i][1],
            owner = type_and_etc[i][3], 
            date = type_and_etc[i][2],
            ruleIndex = sections[i])
    g.create(node1) 
    section_df = df[df['Section_id'] == i + 1] 
    for s, ss in section_df.iterrows():
        node2 = Node(
            "son", 
            Name = ss['Status'] + ss['name'],
            Component = components[i],
            originalRule = rules[i],
            Type = "Derive",
            ProjectName = type_and_etc[i][0],
            Version = type_and_etc[i][1],
            owner = type_and_etc[i][3], 
            date = type_and_etc[i][2],
            ruleIndex = sections[i])
        g.create(node2)
        relationship = Relationship(node2, "from", node1) 
        g.create(relationship) 